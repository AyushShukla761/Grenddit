generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  username            String?        @unique
  image               String?
  createdSubgrenddits Subgrenddit[]
  subscriptions       Subscription[]
  votes               Vote[]
  accounts            Account[]
  sessions            Session[]
  Post                Post[]
  Comment             Comment[]
  CommentVote         CommentVote[]
}

model Subgrenddit {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String?
  posts       Post[]
  creator     User?          @relation(fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  userId        String
  subgrendditid String
  user          User        @relation(fields: [userId], references: [id])
  subgrenddit   Subgrenddit @relation(fields: [subgrendditid], references: [id])

  @@id([userId, subgrendditid])
}

model Post {
  id            String      @id @default(cuid())
  title         String
  content       Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subgrendditId String
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  subgrenddit   Subgrenddit @relation(fields: [subgrendditId], references: [id])
  comments      Comment[]
  votes         Vote[]
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  authorId  String
  postId    String
  replyId   String?
  commentId String?
  author    User          @relation(fields: [authorId], references: [id])
  post      Post          @relation(fields: [postId], references: [id])
  replyTo   Comment?      @relation("ReplyTo", fields: [replyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  user   User     @relation(fields: [userId], references: [id])
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

enum VoteType {
  UP
  DOWN
}

enum crdb_internal_region {
  gcp_europe_west1 @map("gcp-europe-west1")
}
